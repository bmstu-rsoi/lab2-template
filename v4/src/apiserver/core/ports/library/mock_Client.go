// Code generated by mockery v2.33.3. DO NOT EDIT.

package library

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// GetBooks provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MockClient) GetBooks(_a0 context.Context, _a1 string, _a2 bool, _a3 uint64, _a4 uint64) (LibraryBooks, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 LibraryBooks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, uint64, uint64) (LibraryBooks, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, uint64, uint64) LibraryBooks); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(LibraryBooks)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool, uint64, uint64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBooks'
type MockClient_GetBooks_Call struct {
	*mock.Call
}

// GetBooks is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 bool
//   - _a3 uint64
//   - _a4 uint64
func (_e *MockClient_Expecter) GetBooks(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}) *MockClient_GetBooks_Call {
	return &MockClient_GetBooks_Call{Call: _e.mock.On("GetBooks", _a0, _a1, _a2, _a3, _a4)}
}

func (_c *MockClient_GetBooks_Call) Run(run func(_a0 context.Context, _a1 string, _a2 bool, _a3 uint64, _a4 uint64)) *MockClient_GetBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool), args[3].(uint64), args[4].(uint64))
	})
	return _c
}

func (_c *MockClient_GetBooks_Call) Return(_a0 LibraryBooks, _a1 error) *MockClient_GetBooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetBooks_Call) RunAndReturn(run func(context.Context, string, bool, uint64, uint64) (LibraryBooks, error)) *MockClient_GetBooks_Call {
	_c.Call.Return(run)
	return _c
}

// GetLibraries provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockClient) GetLibraries(_a0 context.Context, _a1 string, _a2 uint64, _a3 uint64) (Libraries, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 Libraries
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) (Libraries, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) Libraries); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(Libraries)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetLibraries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLibraries'
type MockClient_GetLibraries_Call struct {
	*mock.Call
}

// GetLibraries is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 uint64
//   - _a3 uint64
func (_e *MockClient_Expecter) GetLibraries(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockClient_GetLibraries_Call {
	return &MockClient_GetLibraries_Call{Call: _e.mock.On("GetLibraries", _a0, _a1, _a2, _a3)}
}

func (_c *MockClient_GetLibraries_Call) Run(run func(_a0 context.Context, _a1 string, _a2 uint64, _a3 uint64)) *MockClient_GetLibraries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *MockClient_GetLibraries_Call) Return(_a0 Libraries, _a1 error) *MockClient_GetLibraries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetLibraries_Call) RunAndReturn(run func(context.Context, string, uint64, uint64) (Libraries, error)) *MockClient_GetLibraries_Call {
	_c.Call.Return(run)
	return _c
}

// ObtainBook provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockClient) ObtainBook(_a0 context.Context, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_ObtainBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObtainBook'
type MockClient_ObtainBook_Call struct {
	*mock.Call
}

// ObtainBook is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *MockClient_Expecter) ObtainBook(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockClient_ObtainBook_Call {
	return &MockClient_ObtainBook_Call{Call: _e.mock.On("ObtainBook", _a0, _a1, _a2)}
}

func (_c *MockClient_ObtainBook_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *MockClient_ObtainBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_ObtainBook_Call) Return(_a0 error) *MockClient_ObtainBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_ObtainBook_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClient_ObtainBook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
